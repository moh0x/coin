/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "./environments";
import * as core from "./core";
import * as Courier from "./api/index";
import { Audiences } from "./api/resources/audiences/client/Client";
import { AuditEvents } from "./api/resources/auditEvents/client/Client";
import { AuthTokens } from "./api/resources/authTokens/client/Client";
import { Automations } from "./api/resources/automations/client/Client";
import { Brands } from "./api/resources/brands/client/Client";
import { Bulk } from "./api/resources/bulk/client/Client";
import { Inbound } from "./api/resources/inbound/client/Client";
import { Lists } from "./api/resources/lists/client/Client";
import { Messages } from "./api/resources/messages/client/Client";
import { Notifications } from "./api/resources/notifications/client/Client";
import { Profiles } from "./api/resources/profiles/client/Client";
import { Templates } from "./api/resources/templates/client/Client";
import { Tenants } from "./api/resources/tenants/client/Client";
import { Translations } from "./api/resources/translations/client/Client";
import { Users } from "./api/resources/users/client/Client";
export declare namespace CourierClient {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
    interface IdempotentRequestOptions extends RequestOptions {
        idempotencyKey?: string | undefined;
        idempotencyExpiry?: string | undefined;
    }
}
export declare class CourierClient {
    protected readonly _options: CourierClient.Options;
    constructor(_options?: CourierClient.Options);
    /**
     * Use the send API to send a message to one or more recipients.
     *
     * @param {Courier.SendMessageRequest} request
     * @param {CourierClient.IdempotentRequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.send({
     *         message: {
     *             content: {
     *                 version: "string",
     *                 brand: {
     *                     "key": "value"
     *                 },
     *                 elements: [{
     *                         type: "text"
     *                     }]
     *             },
     *             data: {
     *                 "string": {
     *                     "key": "value"
     *                 }
     *             },
     *             brand_id: "string",
     *             channels: {
     *                 "string": {
     *                     brand_id: undefined,
     *                     providers: undefined,
     *                     routing_method: undefined,
     *                     if: undefined,
     *                     timeouts: undefined,
     *                     override: undefined,
     *                     metadata: undefined
     *                 }
     *             },
     *             context: {
     *                 tenant_id: "string"
     *             },
     *             metadata: {
     *                 event: "string",
     *                 tags: [],
     *                 utm: {
     *                     source: undefined,
     *                     medium: undefined,
     *                     campaign: undefined,
     *                     term: undefined,
     *                     content: undefined
     *                 },
     *                 trace_id: "string"
     *             },
     *             preferences: {
     *                 subscription_topic_id: "string"
     *             },
     *             providers: {
     *                 "string": {
     *                     override: undefined,
     *                     if: undefined,
     *                     timeouts: undefined,
     *                     metadata: undefined
     *                 }
     *             },
     *             routing: {
     *                 method: Courier.RoutingMethod.All,
     *                 channels: [{
     *                         channel: "string",
     *                         config: undefined,
     *                         method: undefined,
     *                         providers: undefined,
     *                         if: undefined
     *                     }]
     *             },
     *             timeout: {
     *                 provider: {},
     *                 channel: {},
     *                 message: 1,
     *                 escalation: 1,
     *                 criteria: Courier.Criteria.NoEscalation
     *             },
     *             delay: {
     *                 duration: 1,
     *                 until: "string"
     *             },
     *             expiry: {
     *                 expires_at: "string",
     *                 expires_in: "string"
     *             },
     *             to: {
     *                 audience_id: "string",
     *                 data: {},
     *                 filters: []
     *             }
     *         }
     *     })
     */
    send(request: Courier.SendMessageRequest, requestOptions?: CourierClient.IdempotentRequestOptions): Promise<Courier.SendMessageResponse>;
    protected _audiences: Audiences | undefined;
    get audiences(): Audiences;
    protected _auditEvents: AuditEvents | undefined;
    get auditEvents(): AuditEvents;
    protected _authTokens: AuthTokens | undefined;
    get authTokens(): AuthTokens;
    protected _automations: Automations | undefined;
    get automations(): Automations;
    protected _brands: Brands | undefined;
    get brands(): Brands;
    protected _bulk: Bulk | undefined;
    get bulk(): Bulk;
    protected _inbound: Inbound | undefined;
    get inbound(): Inbound;
    protected _lists: Lists | undefined;
    get lists(): Lists;
    protected _messages: Messages | undefined;
    get messages(): Messages;
    protected _notifications: Notifications | undefined;
    get notifications(): Notifications;
    protected _profiles: Profiles | undefined;
    get profiles(): Profiles;
    protected _templates: Templates | undefined;
    get templates(): Templates;
    protected _tenants: Tenants | undefined;
    get tenants(): Tenants;
    protected _translations: Translations | undefined;
    get translations(): Translations;
    protected _users: Users | undefined;
    get users(): Users;
    protected _getAuthorizationHeader(): Promise<string>;
}

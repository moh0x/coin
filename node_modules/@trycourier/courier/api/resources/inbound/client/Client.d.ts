/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Courier from "../../../index";
export declare namespace Inbound {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Inbound {
    protected readonly _options: Inbound.Options;
    constructor(_options?: Inbound.Options);
    /**
     * @param {Courier.InboundTrackEvent} request
     * @param {Inbound.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     * @throws {@link Courier.ConflictError}
     *
     * @example
     *     await courier.inbound.track({
     *         event: "New Order Placed",
     *         messageId: "4c62c457-b329-4bea-9bfc-17bba86c393f",
     *         userId: "1234",
     *         type: "track",
     *         properties: {
     *             "order_id": 123,
     *             "total_orders": 5,
     *             "last_order_id": 122
     *         }
     *     })
     */
    track(request: Courier.InboundTrackEvent, requestOptions?: Inbound.RequestOptions): Promise<Courier.TrackAcceptedResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}

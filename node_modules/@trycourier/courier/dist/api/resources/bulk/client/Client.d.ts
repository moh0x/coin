/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Courier from "../../../index";
export declare namespace Bulk {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
    interface IdempotentRequestOptions extends RequestOptions {
        idempotencyKey?: string | undefined;
        idempotencyExpiry?: string | undefined;
    }
}
export declare class Bulk {
    protected readonly _options: Bulk.Options;
    constructor(_options?: Bulk.Options);
    /**
     * @param {Courier.BulkCreateJobParams} request
     * @param {Bulk.IdempotentRequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await courier.bulk.createJob({
     *         message: {
     *             message: {
     *                 template: "string",
     *                 data: {
     *                     "string": {
     *                         "key": "value"
     *                     }
     *                 },
     *                 brand_id: "string",
     *                 channels: {
     *                     "string": {
     *                         brand_id: undefined,
     *                         providers: undefined,
     *                         routing_method: undefined,
     *                         if: undefined,
     *                         timeouts: undefined,
     *                         override: undefined,
     *                         metadata: undefined
     *                     }
     *                 },
     *                 context: {
     *                     tenant_id: "string"
     *                 },
     *                 metadata: {
     *                     event: "string",
     *                     tags: [],
     *                     utm: {
     *                         source: undefined,
     *                         medium: undefined,
     *                         campaign: undefined,
     *                         term: undefined,
     *                         content: undefined
     *                     },
     *                     trace_id: "string"
     *                 },
     *                 preferences: {
     *                     subscription_topic_id: "string"
     *                 },
     *                 providers: {
     *                     "string": {
     *                         override: undefined,
     *                         if: undefined,
     *                         timeouts: undefined,
     *                         metadata: undefined
     *                     }
     *                 },
     *                 routing: {
     *                     method: Courier.RoutingMethod.All,
     *                     channels: [{
     *                             channel: "string",
     *                             config: undefined,
     *                             method: undefined,
     *                             providers: undefined,
     *                             if: undefined
     *                         }]
     *                 },
     *                 timeout: {
     *                     provider: {},
     *                     channel: {},
     *                     message: 1,
     *                     escalation: 1,
     *                     criteria: Courier.Criteria.NoEscalation
     *                 },
     *                 delay: {
     *                     duration: 1,
     *                     until: "string"
     *                 },
     *                 expiry: {
     *                     expires_at: "string",
     *                     expires_in: "string"
     *                 }
     *             },
     *             brand: "string",
     *             data: {
     *                 "string": {
     *                     "key": "value"
     *                 }
     *             },
     *             event: "string",
     *             locale: {
     *                 "string": {
     *                     "key": "value"
     *                 }
     *             },
     *             override: {
     *                 "key": "value"
     *             }
     *         }
     *     })
     */
    createJob(request: Courier.BulkCreateJobParams, requestOptions?: Bulk.IdempotentRequestOptions): Promise<Courier.BulkCreateJobResponse>;
    /**
     * Ingest user data into a Bulk Job
     *
     * @param {string} jobId - A unique identifier representing the bulk job
     * @param {Courier.BulkIngestUsersParams} request
     * @param {Bulk.IdempotentRequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.bulk.ingestUsers("string", {
     *         users: [{
     *                 preferences: {
     *                     categories: {},
     *                     notifications: {}
     *                 },
     *                 profile: {
     *                     "key": "value"
     *                 },
     *                 recipient: "string",
     *                 data: {
     *                     "key": "value"
     *                 },
     *                 to: {
     *                     account_id: "string",
     *                     context: {
     *                         tenant_id: "string"
     *                     },
     *                     data: {},
     *                     email: "string",
     *                     locale: "string",
     *                     user_id: "string",
     *                     phone_number: "string",
     *                     preferences: {
     *                         categories: undefined,
     *                         notifications: {},
     *                         templateId: undefined
     *                     },
     *                     tenant_id: "string"
     *                 }
     *             }]
     *     })
     */
    ingestUsers(jobId: string, request: Courier.BulkIngestUsersParams, requestOptions?: Bulk.IdempotentRequestOptions): Promise<void>;
    /**
     * Run a bulk job
     *
     * @param {string} jobId - A unique identifier representing the bulk job
     * @param {Bulk.IdempotentRequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await courier.bulk.runJob("string")
     */
    runJob(jobId: string, requestOptions?: Bulk.IdempotentRequestOptions): Promise<void>;
    /**
     * Get a bulk job
     *
     * @param {string} jobId - A unique identifier representing the bulk job
     * @param {Bulk.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await courier.bulk.getJob("string")
     */
    getJob(jobId: string, requestOptions?: Bulk.RequestOptions): Promise<Courier.BulkGetJobResponse>;
    /**
     * Get Bulk Job Users
     *
     * @param {string} jobId - A unique identifier representing the bulk job
     * @param {Courier.BulkGetUsersParams} request
     * @param {Bulk.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await courier.bulk.getUsers("string", {
     *         cursor: "string"
     *     })
     */
    getUsers(jobId: string, request?: Courier.BulkGetUsersParams, requestOptions?: Bulk.RequestOptions): Promise<Courier.BulkGetJobUsersResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
